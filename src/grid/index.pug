mixin repeatColumns(quantity)
	each _, i in Array(quantity)
		div=i+ 1

mixin rowWithColumns(quantity)
	.row
		+repeatColumns(quantity)

mixin allOrders(quantity)
	each _, $indexRow in Array(quantity)
		.row
			each __, $indexCol in Array(quantity)
				if $indexCol == 11
					div(class=`col1 order${$indexRow + 1}`)=`${$indexCol+1}`
				else
					.col1=$indexCol+1

html
	head
		link(rel='stylesheet', href='../_docs/index.css')
		link(rel='stylesheet', href='../reset/index.css')
		link(rel='stylesheet', href='../typography/index.css')
		link(rel='stylesheet', href='./index.css')
	body.doc
		h1.heading0 Grid

		section
			h1.heading1 Fluid columns

			p.paragraph Adding .row to a container will make all the children of that container behave like block elements.
			p.paragraph There is no limit on the number of columns

			.demo
				each _, i in Array(16)
					+rowWithColumns(i+1)

		section
			h1.heading1 Fixed columns

			p.paragraph Adding .colNUMBER will make the column use a fixed width.
			p.paragraph The default number of columns is 12

			.demo
				each _, i in Array(12)
					.row
						div(class=`col${i+1}`)
							| col#{i+1}

		section
			h1.heading1 Row Wrap

			h2.heading2 Default
			p.paragraph The default is now to wrap the columns in the row.
			p.paragraph The content will overflow the row and be visible
			.demo
				.row
					.col5 1 .col5
					.col5 2 .col5
					.col5 3 .col5

			h2.heading2 Force wrap / break
			p.paragraph Adding `wrap` will force the columns to break if they dont fit the row
			.demo
				.row.wrap
					.col5 1 .col5
					.col5 2 .col5
					.col5 3 .col5

			h2.heading2 No wrap / break
			p.paragraph Adding `wrap-no` will force the columns to not break, reseting back to the default behavior
			.demo
				.row.wrapDisable
					.col5 1 .col5
					.col5 2 .col5
					.col5 3 .col5

			h2.heading2 Force wrap reverse / break reverse
			p.paragraph Adding `wrap` will force the columns to break, in reverse order, if they dont fit the row
			.demo
				.row.wrapReverse
					.col5 1 .col5
					.col5 2 .col5
					.col5 3 .col5

		section
			h1.heading1 Column offset
			.demo
				each _, i in Array(12)
					.row
						div(class=`col1 offset${i+1}`)
							| #{i+1}

		section
			h1.heading1 Direction
			.demo
				p.paragraph default directionHorizontal
				.row.directionHorizontal
					.col1 1
					.col1 2
					.col1 3
				p.paragraph directionHorizontalReverse
				.row.directionHorizontalReverse
					.col1 1
					.col1 2
					.col1 3
				p.paragraph directionVertical
				.row.directionVertical
					.col1 1
					.col2 2
					.col3 3
				p.paragraph directionVerticalReverse
				.row.directionVerticalReverse
					.col1 1
					.col2 2
					.col3 3

		section
			h1.heading1 Align

			section
				h1.heading2 Align Horizontal
				.demo
					p.paragraph Left
					.row.alignHorizontalLeft
						.col1 1
						.col1 2
						.col1 3
					p.paragraph Right
					.row.alignHorizontalRight
						.col1 1
						.col1 2
						.col1 3
					p.paragraph Center
					.row.alignHorizontalCenter
						.col1 1
						.col1 2
						.col1 3
					p.paragraph Space between
					.row.alignHorizontalSpaceBetween
						.col1 1
						.col1 2
						.col1 3
					p.paragraph Space around
					.row.alignHorizontalSpaceAround
						.col1 1
						.col1 2
						.col1 3
					p.paragraph Space evenly
					.row.alignHorizontalSpaceEvenly
						.col1 1
						.col1 2
						.col1 3

			section
				h1.heading2 Align Vertical
				.demo
					p.paragraph alignVerticalTop
					.row.alignVerticalTop
						.col1(style="height: 80px;") 1
						.col1(style="height: 30px;") 2
						.col1(style="height: 50px;") 3
					p.paragraph alignVerticalBottom
					.row.alignVerticalBottom
						.col1(style="height: 80px;") 1
						.col1(style="height: 30px;") 2
						.col1(style="height: 50px;") 3
					p.paragraph alignVerticalCenter
					.row.alignVerticalCenter
						.col1(style="height: 80px;") 1
						.col1(style="height: 30px;") 2
						.col1(style="height: 50px;") 3
					p.paragraph alignVerticalStretch
					.row.alignVerticalStretch
						.col1 1
						.col1 2
						.col1 3

		section
			h1.heading1 Align content
			p.paragraph This modifier only takes effect on multi-line flexible containers, where flex-wrap is set to either wrap or wrap-reverse)
			.demo
				p.paragraph start
				.row.wrap.alignContentStart
					.col6 1
					.col3 2
					.col5 3
					.col7 4
				p.paragraph end
				.row.wrap.alignContentEnd
					.col6 1
					.col3 2
					.col5 3
					.col7 4
				p.paragraph center
				.row.wrap.alignContentCenter
					.col6 1
					.col3 2
					.col5 3
					.col7 4
				p.paragraph spacebetween
				.row.wrap.alignContentSpacebetween
					.col6 1
					.col3 2
					.col5 3
					.col7 4
				p.paragraph spacearound
				.row.wrap.alignContentSpacearound
					.col6 1
					.col3 2
					.col5 3
					.col7 4
				p.paragraph stretch
				.row.wrap.alignContentStretch
					.col6 1
					.col3 2
					.col5 3
					.col7 4

		section
			h1.heading1 Order columns
			.demo
				+allOrders(12)

		section
			h1.heading1 Nested Grids
			.demo
				.row
					.col6 6
					.col6 6
				.row
					.col6
						.row
							.col6 6
							.col6 6
					.col6 6
				.row
					.col6 6
					.col6 6
				.row
					.col6
						.row
							.col6 6
					.col6 6
				.row
					.col6 6
					.col6 6
				.row
					.col6
						.row
							.col4 4
							.col4 4
							.col4 4
						.row
							.col6 6
							.col6
								.row
									.col4 4
									.col4 4
									.col4 4

					.col6 6

		section
			h1.heading1 Gaps

			h2.heading2 Columns gaps
			.demo
				each _, $indexRow in Array(6)
					div(class=`row gapCol${$indexRow}`)
						+repeatColumns(12)

			h2.heading2 Row gaps
			.demo
				each _, $indexRow in Array(6)
					div(class=`row wrap gapRow${$indexRow+1}`)
						each _, i in Array(6)
							div.col4=i+ 1
